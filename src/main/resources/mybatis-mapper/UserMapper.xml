<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.project.messanger.user.dao.UserMapper">


    <select id="getUser" resultType="com.project.messanger.user.model.User" parameterType="String">
        select userId, id, pwd, role from user where id = #{id}
    </select>

    <insert id="newUser" parameterType="com.project.messanger.user.model.User">
        INSERT INTO user (id,pwd,name,email, phone, role) VALUE( #{id}, #{pwd}, #{name}, #{phone},#{email}, #{role})
    </insert>

    <select id="checkUser" parameterType="String" resultType="com.project.messanger.user.model.User">
        SELECT *
        FROM user
        WHERE id = #{id}
    </select>

    <select id="getAllGroup" parameterType="String" resultType="_int">
        SELECT COUNT(*)
        FROM groups
        WHERE userId =
        ( SELECT userId
            FROM user
            WHERE id = #{id}
        )
    </select>

    <resultMap id="getAllGroupMemberData" type="hashmap"></resultMap>
    <select id="getAllGroupMember" parameterType="String" resultMap="getAllGroupMemberData">
        SELECT groups.groupId, user.name
        FROM user
        NATURAL JOIN groups
        WHERE
        user.name NOT IN (select name from user where id = #{id})
        AND
        groupId =
        ANY(select groupId from groups where userId =
        (select userId from user where id = #{id})
            )
    </select>

    <resultMap id="getAllGroupNameData" type="hashmap"></resultMap>
    <select id="getAllGroupName" parameterType="String" resultMap="getAllGroupNameData">
        SELECT groupId, groupName
        FROM groupInfo
        WHERE groupId  IN
              (SELECT groupId
               FROM groups
               WHERE userId =
                     (SELECT userId
                      FROM user
                      where id = #{id})
              )
    </select>

    <resultMap id="getGroupInfoMap" type="hashmap"></resultMap>
    <select id="getGroupInfo" parameterType="Integer" resultMap="getGroupInfoMap">
        SELECT groupId, groupName, description
        FROM groupInfo
        WHERE groupId = #{gidx}
    </select>

    <select id="getUserID" parameterType="String" resultType="Integer">
        SELECT userId
        FROM user
        WHERE id = #{id}
    </select>

    <insert id="newPromiseInfo" parameterType="com.project.messanger.user.model.PromiseInfo">
        INSERT INTO promiseInfo (promiseName, promiseInfo) VALUE(#{promiseName}, #{promiseInfo})
    </insert>

    <select id="selectPromiseId" parameterType="String" resultType="Integer">
        SELECT promiseId
        FROM promiseInfo
        WHERE promiseName = #{prpmise_name}
    </select>

    <select id="checkPromiseId" parameterType="String" resultType="String">
        SELECT promiseName
        FROM promiseInfo
        WHERE promiseName = #{prpmise_name}
    </select>

    <insert id="newPromise" parameterType="int">
        INSERT INTO promises (groupId, promiseId) VALUE (#{groupId}, #{promiseId})
    </insert>

    <select id="getAllPromise" parameterType="int" resultType="com.project.messanger.user.model.PromiseInfo">
        SELECT promiseId, promiseName, promiseInfo
        FROM promiseInfo
        WHERE promiseId =
                  ANY (SELECT promiseId
                        FROM promises
                        WHERE groupId = #{group_id}
                      )
    </select>
    <select id="testPormiseInfo" resultType="com.project.messanger.user.model.PromiseInfo">
        SELECT * FROM promiseInfo
    </select>


    <resultMap id="getUpdateGroupInfoMap" type="hashmap"></resultMap>
    <select id="getUpdateGroupInfo" parameterType="Integer" resultMap="getUpdateGroupInfoMap">
        SELECT *
        FROM promiseInfo
        NATURAL JOIN promises
        WHERE promiseId =
              ANY (
                    SELECT promiseId
                    FROM promises
                    WHERE groupId = #{group_id}
                    AND promiseId = #{promise_id}
                  )
    </select>

    <update id="updatePromise" parameterType="com.project.messanger.user.model.PromiseInfo">
        UPDATE promiseInfo
        SET promiseName = #{promiseName}, promiseInfo = #{promiseInfo}
        WHERE promiseId = #{promiseId}
    </update>

    <insert id="newGroupInfo" parameterType="com.project.messanger.user.model.Group">
        INSERT INTO groupInfo (groupName, description) VALUES( #{groupName}, #{groupInfo})
    </insert>
    <select id="getGroupId" parameterType="String" resultType="Integer">
        SELECT groupId FROM groupInfo WHERE groupName = #{group_name}
    </select>
    <insert id="newGroup" parameterType="com.project.messanger.user.model.Group">
        INSERT INTO groups VALUES(#{userId} , #{groupId})
    </insert>

    <resultMap id="getAllKnowMemberMap" type="com.project.messanger.user.model.Group">
        <id property="groupId" column="groupId" />
        <id property="userId" column="userid" />
    </resultMap>
    <select id="getAllKnowMember" parameterType="String" resultMap="getAllKnowMemberMap">
        SELECT groups.groupId,  user.userId
        FROM user
        NATURAL JOIN groups
        WHERE
        user.name NOT IN
        (
            select name from user where userId = #{userId}
        )
        AND
            groupId = ANY(select groupId from groups where userId =
                        (select userId from user where userId = #{userId})
            )
    </select>

    <select id="checkGreoupMember" parameterType="String" resultType="com.project.messanger.user.model.User">
        SELECT user.userId, user.id, user.name
        FROM user
        NATURAL JOIN groups
        WHERE groups.userId = ANY
        (
            SELECT userId FROM groups WHERE userId != #{userId}
        )
    </select>

    <resultMap id="getGroupMemberMap" type="com.project.messanger.user.model.User">
        <id property="userId" column="userId" />
        <id property="id" column="id" />
    </resultMap>
    <select id="getGroupMember" parameterType="String" resultMap="getGroupMemberMap">
        SELECT user.userId,  user.id
        FROM user
        NATURAL JOIN groups
        WHERE
        user.name NOT IN (select name from user where id = #{id})
        AND
        groupId = #{gidx}
    </select>

    <insert id="addGroupUser" parameterType="int">
        INSERT INTO groups (userId, groupId) VALUES(#{addUserId}, #{addGroupId})
    </insert>
    <delete id="delGroupUser" parameterType="int">
        DELETE FROM groups WHERE userId = #{userId} AND groupId = #{delGroupId}
    </delete>

    <update id="updateGroup" parameterType="hashmap">
        UPDATE groupInfo set description = #{groupInfo} WHERE groupId = #{groupId};
    </update>
</mapper>